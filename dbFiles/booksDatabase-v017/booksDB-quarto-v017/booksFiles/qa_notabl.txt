Single Table queries 


1.List all books (title and number sold) that sold more than 1000 copies. List the books with the most sales at the top. 
 
ANSWER: 
select title_name, sales 
from titles 
where sales > 1000 
order by sales desc; 
 

2.List all authors who are live either in NY or CA and whose last name begins with a "K".  
 
ANSWER: 
select au_fname, au_lname 
from authors 
where (state = 'NY' or state='CA')  and  substr(au_lname,1,1) = 'K';   -- (parentheses are required 
                                                                                                                                                  -- since AND is done before OR by default) 

3.List the first and last names of all authors whose last name starts with a letter from A through J   
(HINT: In the where clause, make sure that the first letter of the last name is both  >="A" and also <"K") 
(HINT: another possible solution is to use the LIKE several times - once for A, once for B, once for C, etc up to J. Each LIKE should be separated from the others by OR's) 
 
ANSWER: 
select au_fname, au_lname 
from authors 
where substr(au_lname,1,1) >= 'A' and substr(au_lname,1,1) < 'K'; 
 
ANOTHER ANSWER 
select au_fname, au_lname 
from authors 
where lname like 'A%' or lname like 'B%' or lname like 'C%' or lname like 'D%' or lname like 'E%' or 
lname like 'F%' or lname like 'G%' or lname like 'H%' or lname like 'I%' or lname like 'J%' 

4.For each author, show their first initial, followed by a period and a space, followed by their last name. In the 2nd column show the author's state. Show the column heading for the first 
column as 'AuthorName'.  Order the results in alphabetical order based on the full name of the person. 
 
ANSWER: 
select substr(au_fname,1,1) || '. ' || au_lname  as   'AuthorName',  state 
from authors 
order by au_lname, au_fname; 

5.Show the titles of all books. Also show the length of the title, i.e. how many characters, including spaces and punctuation. Display the 2nd column with the name 'TitleLength'.  Sort the 
output so that the shortest titles are listed first. If two titles are the same length then sort those titles alphabetically.  
 
ANSWER 
select title_name, length(title_name) as 'TitleLength' 
from titles 
order by length(title_name), title_name; 
 


Single table queries with aggregate functions but no "group by"  (i.e. these will return EXACTLY one row for each query).  

6.List the average price of all books. 
 
ANSWER:  
select avg(price)  
from titles;

7.List the average price of history books. 
 
ANSWER:  
select avg(price)  
from titles 
where type = 'history'; 
 

8.List the number of pages in the longest and shortest books (don't list the actual title of the book). 
 
ANSWER: 
select min(pages) , max(pages) from titles; 

Single table queries with calculated values

9.List the title_name and total revenue for each book. (Revenue for a book is the number sold times the price of the book.) 
 
ANSWER: 
select title_name,   sales * price   as   'Total  Revenue' 
from titles; 

10.List title of each book and the sale price for the book where the sale price is 10% off of the original price. 
 
ANSWER: 
select title_name, price * 0.90 as 'Sale Price' 
from titles;

Single table queries with "group by". These can use aggregate functions but will return at most one row in the output for each "group" of rows as defined in the "group by" 

11.For each "type" of book (e.g. biography, children, etc) list the number of pages in the shortest book of that type and the number of pages in the longest book of that type. Sort the results 
alphabetically by the type of book. 
 
ANSWER: 
select type, min(pages) AS 'Length of Shortest' ,  max(pages)  as 'Length of Longest' 
from titles 
group by type 
order by type; 


12.List the types of books (e.g. history, biography, etc) and the average price of those books for which the average price of books in that category is at least $12.00. 
 
ANSWER: 
select type, avg(price) 
from titles 
group by type 
having avg(price) >= 12; 

13.List the types of books (e.g. history, biography, etc) and the average price of those books for which the average price of books in that category is at least $12.00. 
 
ANSWER: 
select type, avg(price) 
from titles 
group by type 
having avg(price) >= 12; 

14.For each type of book (e.g. biography, children, etc), show the number of those books that are 450 pages or longer. The column heading should be '# of long books'. If there are no titles of 
a particular type that are so long, then don't show that type at all. 
 
ANSWER 
select type, count(*) as '# of long books' 
from titles 
where pages >= 450 
group by type; 

15.Modify the answer to the previous question so that only those types for which there are at least 2 long books are displayed. 
 
ANSWER  -  NOTE: the only change to the above answer is the addition of the HAVING clause at the end. 
 
select type, count(*) as '# of long books' 
from titles 
where pages >= 450 
group by type 
having count(*) >= 2;         -- this is the only change. 

 

Multiple table queries with group by 

16.For each publisher, list the name of the publisher and total number of pages that the publisher has published in all their books (ie. add up all the pages in all books for each publisher). 
Show the publishers who have published the most pages at the top of the result list. 
 
ANSWER 
select pub_name, sum(pages) 
from publishers join titles on publishers.pub_id = titles.pub_id 
group by pub_name 
order by sum(pages) desc; 

17.Modify the previous query so that only publishers who have published at least 1250 pages will show up. 
 
 
ANSWER 
select ... -- same as previous question 
from ... -- same as previous question 
group ... -- same as previous question
having  sum(pages)  >= 1250      -- THIS LINE IS THE ONLY CHANGE  
order ... -- same as previous question  

18.List each publisher's name and the numbers of pages in their longest and shortest books. Sort the results by the publisher's name. 
 
ANSWER: 
select pub_name, min(pages) AS 'Length of Shortest' ,  max(pages)  as 'Length of Longest' 
from titles join publishers on titles.pub_id = publishers.pub_id 
group by pub_name 
order by pub_name; 
 

Multiple table queries 

19.List the authors first and last names, the author's state, the title name, the publisher name and the publishers state for all books. 
 
ANSWER: 
select au_fname, au_lname, authors.state, title_name, pub_name, publishers.state 
from authors join title_authors on authors.au_id = title_authors.au_id  
                      join titles on title_authors.title_id = titles.title_id  
                      join publishers on publishers.pub_id = titles.pub_id; 
 

20.List the title, number of pages, authors first and last names and author's state for all books that are longer than 150 pages and whose author lives in NY or CA. 
 
ANSWER: 
select title_name, pages, au_fname, au_lname, authors.state  
from authors join title_authors on authors.au_id = title_authors.au_id  
                      join titles on title_authors.title_id = titles.title_id  
where pages > 150 and   (state = 'NY'  or   state = 'CA') ;  -- (parentheses ARE necessary since by default AND is done before OR) 

21.List the authors first and last names, the author's state, the title name, the publisher name and the publishers state only for those books where the author and publisher are from the same 
state. (HINT: specify authors.state [note: there is a period between author and state] in the criteria for the publisher's state). 
 
ANSWER: 
select au_fname, au_lname, authors.state, title_name, pub_name, publishers.state 
from authors join title_authors on authors.au_id = title_authors.au_id  
                      join titles on title_authors.title_id = titles.title_id  
                      join publishers on publishers.pub_id = titles.pub_id 
                where authors.state = publishers.state; 

22.List the title and authors of all books published by "Abatis Publishers" sort the results in alphabetical order by title and then by the au_order column. Do NOT show that au_order column 
in the output. 
 
ANSWER: 
select au_fname, au_lname, title_name, pub_name 
from authors join title_authors on authors.au_id = title_authors.au_id  
                      join titles on title_authors.title_id = titles.title_id  
                      join publishers on publishers.pub_id = titles.pub_id 
where pub_name = 'Abatis Publishers' 
order by title_name, au_order; 
 

23.List the publisher name, author name, and title name for all books that have at least 100 pages and that sold at least 200 copies. Sort the results in alphabetical order first by publisher and 
then by author. 

ANSWER: 
select pub_name, au_fname, au_lname, title_name 
from authors join title_authors on authors.au_id = title_authors.au_id  
                      join titles on title_authors.title_id = titles.title_id  
                      join publishers on publishers.pub_id = titles.pub_id 
                where   pages >= 100 and sales >= 200 
order by  pub_name,   au_lname,  au_fname; 

24.List authors first and last names and the titles they wrote for publishers whose name (ie. the publisher's name) begins with "A", "B" or "C" 
 
ANSWER:  
select au_fname, au_lname, title_name, pub_name 
from authors join title_authors on authors.au_id = title_authors.au_id  
                      join titles on title_authors.title_id = titles.title_id  
                      join publishers on publishers.pub_id = titles.pub_id 
where substr(pub_name, 1,1) IN ('A','B','C'); 

ANOTHER ANSWER: Same as above but use the following WHERE clause instead: 
 
select ...  # same as above 
from .... # same as above 
where pub_name like 'A%'  or  pub_name like 'B%'  or pub_name like 'C%'; 
 

25.List the  publisher name, author's name and phone number for all authors that have written books for the publisher's whose name begins with a letter from A through J.  (HINT: specify 
the publisher's name twice but only show one of them. In the criteria for one of them list >="A" and in the criteria for the other list <"K"). 
 
ANSWER: 
select pub_name, au_fname, au_lname, phone 
from authors join title_authors on authors.au_id = title_authors.au_id  
                      join titles on title_authors.title_id = titles.title_id  
                      join publishers on publishers.pub_id = titles.pub_id 
where substr(pub_name,1,1) >= 'A' and substr(pub_name,1,1) < 'K'; 



26.List the titles of all books and the number of authors for the book (NOT the actual author names). Sort the results so that the books with the most authors appear on top. All books that have 
the same number of authors should be listed in alphabetical order.
 
ANSWER: 
select title_name, count(*) as 'Number of Authors' 
from authors join title_authors on authors.au_id = title_authors.au_id  
                      join titles on title_authors.title_id = titles.title_id  
group by titles.title_id, title_name 
order by count(*) desc, title_name; 

27.List the titles of all books that have 2 or more authors and that are longer than 50 pages. 
 
ANSWER: 
select title_name, count(*) as 'Number of Authors' 
from authors join title_authors on authors.au_id = title_authors.au_id  
                      join titles on title_authors.title_id = titles.title_id  
where pages >= 50 
group by titles.title_id, title_name 
having count(*) >= 2 
order by count(*) desc, title_name; 


28.List all publishers and the number of books that the publisher has published (not the actual titles, just the number of books). Sort the list so that the publisher with the most books appears 
on top. 
 
ANSWER: 
select pub_name, count(*) as '# of Books' 
from titles join publishers on publishers.pub_id = titles.pub_id 
group by publishers.pub_id, pub_name 
order by count(*) desc; 


29.List the publisher name and total revenue for each for each publisher. (Total revenue for a publisher is the total revenue for all books published by that publisher. Revenue for a book is the 
number sold times the price of the book.)
 
ANSWER: 
select pub_name, sum(sales * price) as 'Total Revenue' 
from titles join publishers on publishers.pub_id = titles.pub_id 
group by publishers.pub_id, pub_name; 
 

30.Modify the previous query to only list those publishers who have at least ten thousand dollars in total revenue. 
 
ANSWER: 
select pub_name, sum(sales * price) as 'Total Revenue' 
from titles join publishers on publishers.pub_id = titles.pub_id 
group by publishers.pub_id, pub_name; 
having sum(sales * price) >= 10000; 

31.List the title and author of each book. For each author for a particular book, list the amount of the "advance" that (s)he got for that book.
 
ANSWER: 
select title_name, au_fname, au_lname, advance 
from authors join title_authors on authors.au_id = title_authors.au_id  
                      join titles on title_authors.title_id = titles.title_id  
                      join royalties on royalties.title_id = titles.title_id; 

32.List the title and author of each book. For each author for a particular book, list the total amount in royalties that (s)he got for that book.  
Hint: the royalty dollars for a particular book is the "price" times the "sales" times the "royalty_rate" times the "royalty_share". Sort the results so that the authors who made the most 
royalty dollars are listed at the top. (NOTE: make sure to read the database description at the top of this document to understand the fields ROYALTIES.ROYALTY_RATE and the field 
TITLE_AUTHORS.ROYALTY_SHARE). 
 
ANSWER: 
select title_name, au_fname, au_lname, royalty_share * royalty_rate * sales * price as  'Total Royalties for Author' 
from authors join title_authors on authors.au_id = title_authors.au_id  
                      join titles on title_authors.title_id = titles.title_id  
                      join royalties on royalties.title_id = titles.title_id;

33.List the name of each author and the total amount of royalty dollars that they received for all of their books (name this column "RoyaltyDollars").  Hint: the royalty dollars for a particular 
book is the "price" times the "sales" times the "royalty_rate" times the "royalty_share". Sort the results so that the authors who made the most royalty dollars are listed at the top.  
 
ANSWER: 
select au_fname, au_lname, sum(royalty_share * royalty_rate * sales * price)  as  'Total Royalties for Author' 
from authors join title_authors on authors.au_id = title_authors.au_id  
                      join titles on title_authors.title_id = titles.title_id  
                      join royalties on royalties.title_id = titles.title_id 
group by authors.au_id, au_fname, au_lname 
order by sum(royalty_share * royalty_rate * sales * price)  desc;

34.Modify the query from the previous question so that the list only includes authors who made more than $50,000.00 in royalties. 
 
ANSWER: 
select au_fname, au_lname, sum(royalty_share * royalty_rate * sales * price)  as  'Total Royalties for Author' 
from authors join title_authors on authors.au_id = title_authors.au_id  
                      join titles on title_authors.title_id = titles.title_id  
                      join royalties on royalties.title_id = titles.title_id 
group by authors.au_id, au_fname, au_lname 
having sum(royalty_share * royalty_rate * sales * price) > 50000 
order by sum(royalty_share * royalty_rate * sales * price)  desc;
 
Subqueries, outer joins, unions and other stuff ...
35.Show the title names  and number of pages for those books that are longer than (ie.  more pages) the average length of all books. 
 
ANSWER: 
select title_name , pages 
from titles 
where pages >= (select avg(pages) from titles); 

36.Show the publisher's name and number of authors who have written books for that publisher: 
 
ANSWER: 
select pub_name, count(DISTINCT authors.au_id) as '# of authors' 
from authors join title_authors on authors.au_id = title_authors.au_id  
                      join titles on title_authors.title_id = titles.title_id  
                      join publishers on publishers.pub_id = titles.pub_id 
group by pub_id, pub_name; 

37.Show the pub_name and the number of titles published by that publisher. Only include publishers for whom at least 5 authors have worked.  
 
ANSWER: 
select pub_name, count(*) as 'Number of Titles' 
from publishers as pub1 join titles on pub1.pub_id = titles.pub_id 
group by pub1.pub_id, pub_name 
having   5 <= (select count(DISTINCT authors.au_id) 
from authors join title_authors on authors.au_id = title_authors.au_id  
                      join titles on title_authors.title_id = titles.title_id  
                      join publishers as pub2 on pub2.pub_id = titles.pub_id 
where pub2.pub_id = pub1.pub_id ) ; 

38.Show the names of publishers who did not publish any books (I guess they are just getting started :) ) 
 
ANSWER - with a subquery 
 
select pub_name  
from publishers  as   pub1 
where not exists 
( select *  
from publishers  as pub2  join titles on pub2.pub_id = titles.pub_id 
where pub2.pub_id = pub1.pub_id ); 
 
ANSWER - with a left join 
select pub_name from publishes left join titles on publishers.pub_id = titles.pub_id 
where title_id is NULL;

39.List the name of each publisher and the total number of books that each publisher has published. Sort the results so that the publishers who published the most books appear at the top. If 
two or more publishers published the same number of books then they should be listed in alphabetical order. 

c.The answer should only include publisher who have published some books. 
 
ANSWER: 
select pub_name, count(*) 
from titles join publishers on publishers.pub_id = titles.pub_id 
group by pub_name 
order by count(*) desc, pub_name;
d.This time make sure to also include publishers who have published zero books 

    ANSWER: 
select pub_name, count(titles.title_id) 
from publishers left join titles on publishers.pub_id = titles.pub_id 
group by pub_name 
order by count(*) desc, pub_name; 
 
ANSWER - with a UNION - however the previous answer is shorter and more to the point 

select pub_name , 0  as  NumTitles 
from publishes left join titles on publishers.pub_id = titles.pub_id 
where title_id is NULL  
 
UNION 
 
select pub_name, count(*) as NumTitles 
from titles join publishers on publishers.pub_id = titles.pub_id 
group by pub_name;

Additional questions 

40.# Show the names of the authors and the publishers who published their books. 
# Only show those authors/publishers where the author lives in the same state  
# as the publisher who published the book. 
# Do not show any author/pbulisher names twice. 
 
# ANSWER 
 
sqldf(" 
select distinct au_fname, au_lname, pub_name, authors.state, publishers.state 
from authors join title_authors on authors.au_id = title_authors.au_id 
             join titles on title_authors.title_id = titles.title_id 
             join publishers on titles.pub_id = publishers.pub_id 
where authors.state = publishers.state 
      ") 

41.# QUESTION 
# 
# The exchange rate for nis/usd is 3.3 
# Write a query that shows the titles and prices for biographies that cost between 
# 10 and 20 dollars. Show two columns for the prices. One column for USD 
# and one column for NIS. Name the columns "price in USD" and "price in NIS". 
# Sort the results so that the most expensive books are displayed first. 
 
# ANSWER  
 
sqldf(" 
select title_name, price * 3.3 as 'price in NIS', price as 'price in USD', type 
from titles 
where type = 'biography' and 
      price >= 10 and price <= 20 
order by price desc 
      ") 

42.# Show those titles for which the price of the book is greater than the  
# average price of all books and the number of pages of the book is less 
# than the average number of pages for all books.  
sqldf(" 
select title_name, price, pages 
from titles 
where price > (select avg(price) from titles) and 
      pages < (select avg(pages) from titles) 
      ") 
 
sqldf("select avg(price) from titles") 
sqldf("select avg(pages) from titles") 
 

43.# Show the authors who have not written any books 
sqldf(" 
select au_fname, au_lname 
from authors left join title_authors on authors.au_id = title_authors.au_id 
where title_authors.au_id is null 
") 

44.# In each row show an author's name and the number of books that author wrote. 
# Only show those authors who wrote at least two books. 
# Sort the results alphabetically (last name, first name). 
 
sqldf(" 
select au_fname, au_lname, count(*) 
from authors join title_authors on authors.au_id = title_authors.au_id 
group by au_fname, au_lname 
having count(*) >= 2 
      ") 

45.# Same as previous question. However, this time, only show those authors 
# who wrote biographies, the count of the number of biographies they wrote 
# and only show those authors who wrote at least 2 biographies. 
sqldf(" 
select au_fname, au_lname, count(*) 
from authors join title_authors on authors.au_id = title_authors.au_id 
             join titles on title_authors.title_id = titles.title_id 
where type = 'biography' 
group by au_fname, au_lname 
having count(*) >= 2 
") 
 

46.# Each row of your output should show the name of an author and a publisher. 
# The author did not necessarily write a book for that publisher. 
# The authors should be those authors whose average book price for books they 
# published is above average. 
# The publishers should be those publishers whose average book price for books 
# they published is above average. 
 

Page 1 of 1

