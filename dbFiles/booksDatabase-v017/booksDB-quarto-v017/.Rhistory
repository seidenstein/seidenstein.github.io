#install.packages("jsonlite")
library(jsonlite)
getBasicMovieInfo=function(year,searchTerm){
allpages=c()
url=paste0("https://www.omdbapi.com/?type=movie&s=",searchTerm,"&apikey=3be655d2","&y=",year)
pagesnum=fromJSON(readLines(url))
total=as.numeric(pagesnum[[2]])
for(k in 1:total){
urlpage=paste0(url,"page=",k)
pagesnum=(fromJSON(readLines(url)))
pagesnum=pagesnum$Search
pagesnum=pagesnum[,-5]
allpages=rbind(allpages, pagesnum)
}
return(allpages)
}
basicInfo=getBasicMovieInfo(year=2001, searchTerm="star")
basicInfo
getDetailedMovieInfo=function(movieIDs){
listOfDfs=c()
for(i in 1:length(movieIDs)){
currentid=movieIDs[[i]]
url=paste0("https://www.omdbapi.com/?i=",currentid,"&apikey=3be655d2")
movieinfo=fromJSON(readLines(url))
movieinfo=data.frame(
imdbID=movieinfo$imdbID,
title=movieinfo$Title,
year=movieinfo$Year,
rated=movieinfo$Rated,
released=movieinfo$Released,
runtime=movieinfo$Runtime,
director=movieinfo$Director,
writers=movieinfo$Writer,
actors=movieinfo$Actors)
listOfDfs=append(listOfDfs, list(movieinfo))
}
allMovieDetails=do.call(rbind, listOfDfs)
return(allMovieDetails)
}
detailedInfo=getDetailedMovieInfo(basicInfo$imdbID)
detailedInfo
# You need to write the function "populateDatabase".
# This function takes a database connection object (i.e. variable) and a dataframe that contains the detailed movies data.
# The function inserts the data from the dataframe into the appropriate tables in the database.
# Replace "N/A" values with NULL
populateDatabase = function( dbConnection, detailedInfoDf ){
for(i in 1:nrow(detailedInfoDf)) {
currentMovie = detailedInfoDf[i,]
imdbID = currentMovie$imdbID
result = dbGetQuery(dbConnection, paste0("SELECT * FROM movies WHERE imdbID='", imdbID, "'"))
if(nrow(result) == 0){
# Convert runtime to numeric if it's not already
if(grepl(" min", currentMovie$runtime)){
currentMovie$runtime = as.numeric(gsub(" min", "", currentMovie$runtime))
}
# Convert date to SQLite format if it's in expected format
if(!is.na(as.Date(currentMovie$released, format = "%d %b %Y"))){
currentMovie$released = format(as.Date(currentMovie$released, format = "%d %b %Y"), "%Y-%m-%d")
}
currentMovie[currentMovie == "N/A"] = "NULL"
directors = strsplit(currentMovie$director, ", ")[[1]]
dbExecute(dbConnection, paste0("INSERT INTO movies VALUES ('",
imdbID, "', '",
currentMovie$title, "', '",
currentMovie$year, "', '",
currentMovie$rated, "', '",
currentMovie$released, "', '",
currentMovie$runtime, "')"))
for (director in directors){
dbExecute(dbConnection, paste0("INSERT INTO movies_people VALUES ('",
imdbID, "', '",
director, "', '",
"d')"))
}
}
}
}
# Now, create a connection to the SQLite database file
# Set the "folder" variable below to the path to the folder that contains the SQLite database file.
if(!require(DBI)) {install.packages("DBI"); require(DBI)}
if(!require(RSQLite)) {install.packages("RSQLite"); require(RSQLite)}
getwd()
#folder = "/Users/ethan/Downloads/API"
folder="."
dbfile = "omdapiMovies.sqlite"
db_full_path = paste0(folder, "/", dbfile)
connection <- dbConnect(RSQLite::SQLite(), dbname = db_full_path)
# Now populate the tables in the database with detailed data that you retrieved from the API
populateDatabase( connection, detailedInfo )
#Donny Berlinger and Ethan Zaidman
#Part 1
#install.packages("jsonlite")
library(jsonlite)
getBasicMovieInfo=function(year,searchTerm){
allpages=c()
url=paste0("https://www.omdbapi.com/?type=movie&s=",searchTerm,"&apikey=3be655d2","&y=",year)
pagesnum=fromJSON(readLines(url))
total=as.numeric(pagesnum[[2]])
for(k in 1:total){
urlpage=paste0(url,"page=",k)
pagesnum=(fromJSON(readLines(url)))
pagesnum=pagesnum$Search
pagesnum=pagesnum[,-5]
allpages=rbind(allpages, pagesnum)
}
return(allpages)
}
basicInfo=getBasicMovieInfo(year=2001, searchTerm="star")
basicInfo
#Part 2
getDetailedMovieInfo=function(movieIDs){
listOfDfs=c()
for(i in 1:length(movieIDs)){
currentid=movieIDs[[i]]
url=paste0("https://www.omdbapi.com/?i=",currentid,"&apikey=3be655d2")
movieinfo=fromJSON(readLines(url))
movieinfo=data.frame(
imdbID=movieinfo$imdbID,
title=movieinfo$Title,
year=movieinfo$Year,
rated=movieinfo$Rated,
released=movieinfo$Released,
runtime=movieinfo$Runtime,
director=movieinfo$Director,
writers=movieinfo$Writer,
actors=movieinfo$Actors)
listOfDfs=append(listOfDfs, list(movieinfo))
}
allMovieDetails=do.call(rbind, listOfDfs)
return(allMovieDetails)
}
detailedInfo=getDetailedMovieInfo(basicInfo$imdbID)
detailedInfo
#Part 3
# You need to write the function "populateDatabase".
# This function takes a database connection object (i.e. variable) and a dataframe that contains the detailed movies data.
# The function inserts the data from the dataframe into the appropriate tables in the database.
# Replace "N/A" values with NULL
populateDatabase = function( dbConnection, detailedInfoDf ){
for(i in 1:nrow(detailedInfoDf)) {
currentMovie = detailedInfoDf[i,]
imdbID = currentMovie$imdbID
result = dbGetQuery(dbConnection, paste0("SELECT * FROM movies WHERE imdbID='", imdbID, "'"))
if(nrow(result) == 0){
# Convert runtime to numeric if it's not already
if(grepl(" min", currentMovie$runtime)){
currentMovie$runtime = as.numeric(gsub(" min", "", currentMovie$runtime))
}
# Convert date to SQLite format if it's in expected format
if(!is.na(as.Date(currentMovie$released, format = "%d %b %Y"))){
currentMovie$released = format(as.Date(currentMovie$released, format = "%d %b %Y"), "%Y-%m-%d")
}
currentMovie[currentMovie == "N/A"] = "NULL"
directors = strsplit(currentMovie$director, ", ")[[1]]
dbExecute(dbConnection, paste0("INSERT INTO movies VALUES ('",
imdbID, "', '",
currentMovie$title, "', '",
currentMovie$year, "', '",
currentMovie$rated, "', '",
currentMovie$released, "', '",
currentMovie$runtime, "')"))
for (director in directors){
dbExecute(dbConnection, paste0("INSERT INTO movies_people VALUES ('",
imdbID, "', '",
director, "', '",
"d')"))
}
}
}
}
# The following lines just call the functions from part 1 and part 2 to create a dataframe that contains the detailed movie info:
basicInfo = getBasicMovieInfo(year=2001, searchTerm="star")
detailedInfo = getDetailedMovieInfo( basicInfo$imdbID )
# Now, create a connection to the SQLite database file
# Set the "folder" variable below to the path to the folder that contains the SQLite database file.
if(!require(RSQLite)) {install.packages("RSQLite"); require(RSQLite)}
#folder = "/Users/ethan/Downloads/API"
folder="."
dbfile = "omdapiMovies.sqlite"
db_full_path = paste0(folder, "/", dbfile)
connection <- dbConnect(RSQLite::SQLite(), dbname = db_full_path)
# Now populate the tables in the database with detailed data that you retrieved from the API
populateDatabase( connection, detailedInfo )
readCsvFiles
# Function to create global dataframe variables
# with the csv data from each file in the specified directory
readCsvFiles = function(dir = '' , files) {
# Change backslashes into forward slashes in dir
# This makes the code the same for both mac and windows.
dir = gsub("\\\\", "/", dir)
# Ensure that dir has exactly one trailing slash
dir = sub("/$", "", dir)  # remove trailing "/" from dir if it exists
dir = paste0(dir, "/")   # add a trailing slash
# read in all the files
for (filename in files) {
pathToFile = paste0(dir, filename)
# NOTE - we are using read_csv from the readr package instead of the
#        read.csv function from the base R functions.
#
#        read_csv has an advantage over read.csv in that read_csv tries
#        to automatically guess the data type for each column. By contrast
#        read.csv will assume that all columns are character unless you
#        explicitly specify the colClasses argument.
#        Using read_csv instead of read.csv allows us to use this script
#        to read in many different .csv files wihtout needing to know
#        in advance what the datatypes are for the individual columns in
#        each .csv file.
#
#        read_csv returns a "tibble".
#        we convert the tibble to a data.frame for the benefit of people
#        who are more familiar with data.frames than with tibbles.
#
#        If you are curious about tibbles you can see this webpage (or just
#        search online for another explanation):
#        http://statseducation.com/Introduction-to-R/modules/getting%20data/tibbles/
tb = readr::read_csv( pathToFile, na="NULL", show_col_types=TRUE )
df = as.data.frame(tb)
# readr::read_csv gives columns that only contain integers
# a class of double, i.e. numeric, instead of a class of integer.
#
# This causes issues with the division ( / ) sqlite operator when
# using sqldf on the dataframe (since / will be treated as integer division when
# both operands of the / are integers and as real division when either
# operand is a non-integer)
# Therefore we will attempt to "fix" those columns that contain
# whole numbers by converting them to a integer class.
for (colnum in 1:ncol(df)){
col = df[[colnum]]
if( class(df[[colnum]]) == "numeric" &&
all(
(df[[colnum]] - trunc(df[[colnum]])) == 0
)
)
{
df[[colnum]] = as.integer(df[[colnum]])
}
}
variableName = gsub("\\.csv", "", filename)
cat("created dataframe: ", variableName, "\n")
assign( variableName , df , globalenv())
}
}
# run the function on the specified folder
readCsvFiles(
dir = pathToFolder,
files = theCsvFiles
)
# Get a vector that contains all the .csv filenames in the folder
theCsvFiles = list.files(path=pathToFolder, pattern="\\.csv$", ignore.case=TRUE)
if (!require(readr)) {install.packages("readr"); require(readr)}
# Get a vector that contains all the .csv filenames in the folder
theCsvFiles = list.files(path=pathToFolder, pattern="\\.csv$", ignore.case=TRUE)
pathToFolder = "/Users/yrose/Dropbox (Personal)/website/src/yrData/relational/books/booksDatabase-v017/booksDB-quarto-v017/booksFiles/csv"
if (!require(readr)) {install.packages("readr"); require(readr)}
# Get a vector that contains all the .csv filenames in the folder
theCsvFiles = list.files(path=pathToFolder, pattern="\\.csv$", ignore.case=TRUE)
# Function to create global dataframe variables
# with the csv data from each file in the specified directory
readCsvFiles = function(dir = '' , files) {
# Change backslashes into forward slashes in dir
# This makes the code the same for both mac and windows.
dir = gsub("\\\\", "/", dir)
# Ensure that dir has exactly one trailing slash
dir = sub("/$", "", dir)  # remove trailing "/" from dir if it exists
dir = paste0(dir, "/")   # add a trailing slash
# read in all the files
for (filename in files) {
pathToFile = paste0(dir, filename)
# NOTE - we are using read_csv from the readr package instead of the
#        read.csv function from the base R functions.
#
#        read_csv has an advantage over read.csv in that read_csv tries
#        to automatically guess the data type for each column. By contrast
#        read.csv will assume that all columns are character unless you
#        explicitly specify the colClasses argument.
#        Using read_csv instead of read.csv allows us to use this script
#        to read in many different .csv files wihtout needing to know
#        in advance what the datatypes are for the individual columns in
#        each .csv file.
#
#        read_csv returns a "tibble".
#        we convert the tibble to a data.frame for the benefit of people
#        who are more familiar with data.frames than with tibbles.
#
#        If you are curious about tibbles you can see this webpage (or just
#        search online for another explanation):
#        http://statseducation.com/Introduction-to-R/modules/getting%20data/tibbles/
tb = readr::read_csv( pathToFile, na="NULL", show_col_types=TRUE )
df = as.data.frame(tb)
# readr::read_csv gives columns that only contain integers
# a class of double, i.e. numeric, instead of a class of integer.
#
# This causes issues with the division ( / ) sqlite operator when
# using sqldf on the dataframe (since / will be treated as integer division when
# both operands of the / are integers and as real division when either
# operand is a non-integer)
# Therefore we will attempt to "fix" those columns that contain
# whole numbers by converting them to a integer class.
for (colnum in 1:ncol(df)){
col = df[[colnum]]
if( class(df[[colnum]]) == "numeric" &&
all(
(df[[colnum]] - trunc(df[[colnum]])) == 0
)
)
{
df[[colnum]] = as.integer(df[[colnum]])
}
}
variableName = gsub("\\.csv", "", filename)
cat("created dataframe: ", variableName, "\n")
assign( variableName , df , globalenv())
}
}
# run the function on the specified folder
readCsvFiles(
dir = pathToFolder,
files = theCsvFiles
)
files
theCsvFiles
readCsvFiles(dir=pathToFolder, files="authors.csv")
readCsvFiles(dir=pathToFolder, files="royalties.csv")
debugonce(readCsvFiles)
readCsvFiles(dir=pathToFolder, files="royalties.csv")
debugonce(readCsvFiles)
readCsvFiles(dir=pathToFolder, files="royalties.csv")
tb
df
colnum,
colnum
colnum
if( class(df[[colnum]]) == "numeric" &&
all(
(df[[colnum]] - trunc(df[[colnum]])) == 0
)
)
{
df[[colnum]] = as.integer(df[[colnum]])
}
class(df[[colnum]]) == "numeric"
all(
(df[[colnum]] - trunc(df[[colnum]])) == 0
)
df[[colnum]]
trunc(df[[colnum]])
(df[[colnum]] - trunc(df[[colnum]]))
all(
(df[[colnum]] - trunc(df[[colnum]])) == 0
)
?all
all(
(df[[colnum]] - trunc(df[[colnum]])) == 0
)
all(
(df[[colnum]] - trunc(df[[colnum]])) == 0
, na.rm=TRUE)
readCsvFiles(dir=pathToFolder, files="royalties.csv")
---
title: "booksDB-quarto-v017"
---
title: "booksDB-quarto-v017"
#@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
# INSTRUCTIONS
#
# Set the following variable to the folder that you stored the .csv files in.
# Be default this R file is included in a ZIP file with the .csv files.
# Alternatively you could use setwd() to set the working directory to that folder.
#
pathToFolder = "/Users/yrose/Dropbox (Personal)/website/src/yrData/relational/books/booksDatabase-v017/booksDB-quarto-v017/booksFiles/csv"
# Example
# pathToFolder = "/Users/yrose/Dropbox (Personal)/website/yu/ids2460-dataMgmtForAnal/79spr22-ids2460-dataManagement/sqlNotes/booksDatabase-v003"
#
#@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
# NOTE: This code in this file depends on the readr package.
#       The following line will install the readr package if it is not already
#       installed on your computer.
if (!require(readr)) {install.packages("readr"); require(readr)}
# Get a vector that contains all the .csv filenames in the folder
theCsvFiles = list.files(path=pathToFolder, pattern="\\.csv$", ignore.case=TRUE)
# Function to create global dataframe variables
# with the csv data from each file in the specified directory
readCsvFiles = function(dir = '' , files) {
# Change backslashes into forward slashes in dir
# This makes the code the same for both mac and windows.
dir = gsub("\\\\", "/", dir)
# Ensure that dir has exactly one trailing slash
dir = sub("/$", "", dir)  # remove trailing "/" from dir if it exists
dir = paste0(dir, "/")   # add a trailing slash
# read in all the files
for (filename in files) {
pathToFile = paste0(dir, filename)
# NOTE - we are using read_csv from the readr package instead of the
#        read.csv function from the base R functions.
#
#        read_csv has an advantage over read.csv in that read_csv tries
#        to automatically guess the data type for each column. By contrast
#        read.csv will assume that all columns are character unless you
#        explicitly specify the colClasses argument.
#        Using read_csv instead of read.csv allows us to use this script
#        to read in many different .csv files wihtout needing to know
#        in advance what the datatypes are for the individual columns in
#        each .csv file.
#
#        read_csv returns a "tibble".
#        we convert the tibble to a data.frame for the benefit of people
#        who are more familiar with data.frames than with tibbles.
#
#        If you are curious about tibbles you can see this webpage (or just
#        search online for another explanation):
#        http://statseducation.com/Introduction-to-R/modules/getting%20data/tibbles/
tb = readr::read_csv( pathToFile, na="NULL", show_col_types=TRUE )
df = as.data.frame(tb)
# readr::read_csv gives columns that only contain integers
# a class of double, i.e. numeric, instead of a class of integer.
#
# This causes issues with the division ( / ) sqlite operator when
# using sqldf on the dataframe (since / will be treated as integer division when
# both operands of the / are integers and as real division when either
# operand is a non-integer)
# Therefore we will attempt to "fix" those columns that contain
# whole numbers by converting them to a integer class.
for (colnum in 1:ncol(df)){
col = df[[colnum]]
if( class(df[[colnum]]) == "numeric" &&
all(
(df[[colnum]] - trunc(df[[colnum]])) == 0,
na.rm = TRUE
)
)
{
df[[colnum]] = as.integer(df[[colnum]])
}
}
variableName = gsub("\\.csv", "", filename)
cat("created dataframe: ", variableName, "\n")
assign( variableName , df , globalenv())
}
}
# run the function on the specified folder
readCsvFiles(
dir = pathToFolder,
files = theCsvFiles
)
royalites
titles
readCsvFiles(dir=pathToFolder, files="royalties.csv")
royalites
royalties
readLines("Q_A-v001.txt")
folder = "C:/Users/yrose/Dropbox (Personal)/website/src/yrData/relational/books/booksDatabase-v017/booksDB-quarto-v017/booksFiles"
setwd(folder)
qa = readLines("Q_A-v001.txt")
qa
qa-notab = gsub("\\t", "", qa)
qa_notab = gsub("\\t", "", qa)
qa_notab
qa_notab
grep("^(\\d|#)", qa_notab, value=TRUE)
lines = data.frame(lineNum=1:length(qa_notab), line=qa_notab)
lines
qa_notab
writeLines(qa_notab, "qa_notabl.txt")
getDetailedMovieData = function(movieIDs) {
APILink = "https://www.omdbapi.com/?"
apiKey = "36901372"
listOfDfs = list()
for (id in movieIDs) {
extras = paste0("i=", id, "&apikey=", apiKey)
fullLink = paste0(APILink, extras)
moviedata = fromJSON(fullLink, simplifyDataFrame = TRUE)
moviedata = data.frame(moviedata)
singleRowDf = singleRowDf= moviedata[,c(1,2,3,4,5,6,7,8,9,20)]
listOfDfs = append(listOfDfs, list(singleRowDf))  }
combinedDf = do.call(rbind, listOfDfs)  # Combine all dataframes into a single multi-row dataframe
return(combinedDf)
}
class(factor())
class(list())
class(matrix())
rm( list=ls() )    # see notes from last class for an explanation
sqrt(25)    # get the square root of 25
sqrt(10)    # get the square root of 10
sqrt(100) # this is a function call of the sqrt function
